pipeline {
    agent {
        docker {
            image 'node:18-alpine'
            reuseNode true
        }
    }
    environment {
        AWS_S3_BUCKET = 'mycode007'
        REACT_APP_VERSION = "1.0.$BUILD_ID"
        APP_NAME = 'learnproject'
        AWS_DEFAULT_REGION = 'ap-south-1'
        AWS_DOCKER_REGISTRY = '566970125924.dkr.ecr.ap-south-1.amazonaws.com'         
    }                         
    stages {
        stage('build') {
            steps {
                sh '''
                  echo "running the build"
                  echo "Love is in the AIR" > Index.html 
                  node --version
                  npm --version
                  npm ci
                  npm run build
                  ls -lrt
                '''  
            }
        }
        stage('AWS') {
            agent {
                docker {
                    image 'amazon/aws-cli'
                    reuseNode true
                    args "--entrypoint=''"
                }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'myuser', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                 sh '''
                   aws --version
                   aws s3 sync build s3://$AWS_S3_BUCKET
                   aws s3 ls -lrt 
                 '''
                }                
            }
        }        
        stage('Build Docker image') {
            agent {
                docker {
                    image 'amazon/aws-cli'
                    reuseNode true
                    args "-u root -v /var/run/docker.sock:/var/run/docker.sock --entrypoint=''"
                }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'myuser', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                    sh '''
                        docker build -f ci/dockerfile -t $AWS_DOCKER_REGISTRY/$APP_NAME:$REACT_APP_VERSION .
                        aws ecr get-login-password | docker login --username AWS --password-stdin $AWS_DOCKER_REGISTRY
                        docker push $AWS_DOCKER_REGISTRY/$APP_NAME:$REACT_APP_VERSION
                    '''
                }
            }
        } 
        stage('Approval') {
            steps {
                timeout(time: 1, unit: 'MINUTES') {
                input 'Are we ready to Deploy?'
                }
            }

        }
                stage('deploy') {
            steps {
                sh '''
                 echo "Test stage"
                 test -f build/index.html
                 npm --version
                 npm test
                '''
            }
        }
    }
    post {
        always{
            junit 'test-results/junit.xml'
        }
    }
}
